# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: "webapp31121"   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PROJ: './RestWebAPI1/RestWebAPI1/RestWebAPI1.csproj'
  AZURE_WEBAPP_PACKAGE_PATH: './RestWebAPI1/RestWebAPI1/'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.x.x'                 # set this to the .NET Core version to use

  AZURE_APIM_RESOURCE_PATH: /
  AZURE_APIM_RESOURCEGROUP: test1-rg-30121
  AZURE_APIM_SERVICENAME: test1APIM
  AZURE_APIM_API_ID: restwebapi1
  AZURE_APIM_APPSERVICEURL: https://webapp31121-dfdag6h5ewhnduds.ukwest-01.azurewebsites.net
  SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION: 5.6.3
  SWASHBUCKLE_DOTNET_CORE_VERSION: 3.1.x
  API_IMPORT_SPECIFICATION_PATH: RestWebAPI1\swagger.json
  API_IMPORT_DLL: RestWebAPI1\bin\Release\net8.0\RestWebAPI1.dll
  API_IMPORT_VERSION: v1
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: RestWebAPI1
  AZURE_WEBAPP_Release_PATH: './RestWebAPI1/RestWebAPI1/bin/Release/net8.0/publish/'

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-


      - name: dotnet build and publish
        working-directory: ./${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build #--property:PublishDir= "${{ env.AZURE_WEBAPP_Release_PATH }}"
          #dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # - name: Build with dotnet        
      #   working-directory: ./${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      #   run: dotnet build --configuration Release

      # - name: dotnet publish
      #   working-directory: ./${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      #   run: dotnet publish --configuration ${{ env.CONFIGURATION }} --no-build #--property:PublishDir= ${{ env.AZURE_WEBAPP_Release_PATH }}

      # - name: Install Swashbuckle CLI .NET Global Tool
      #   run: dotnet tool install --global Swashbuckle.AspNetCore.Cli --version ${{ env.SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION }}
      #   working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # - name: Generate Open API Specification Document
      #   run: swagger tofile --output "${{ env.API_IMPORT_SPECIFICATION_PATH }}" "${{ env.API_IMPORT_DLL }}" "${{ env.API_IMPORT_VERSION }}"
            
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.AZURE_WEBAPP_Release_PATH}}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Azure Login
        uses: azure/login@v2
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Import API into Azure API Management
        run: az apim api import --path "${{ env.AZURE_APIM_RESOURCE_PATH }}" --resource-group "${{ env.AZURE_APIM_RESOURCEGROUP }}" --service-name "${{ env.AZURE_APIM_SERVICENAME }}" --api-id "${{ env.AZURE_APIM_API_ID }}" --service-url "${{ env.AZURE_APIM_APPSERVICEURL }}" --specification-path "${{ env.API_IMPORT_SPECIFICATION_PATH }}" --specification-format OpenApi --subscription-required false
      
      - name: logout
        run: >
            az logout
